#!/usr/bin/env node
'use strict';

var app = require('../app');
var debug = require('debug')('otl:server');
var http = require('http');

// Allow directly requiring '.jsx' files.
require('node-jsx').install({extension: '.jsx'});

//TODO: have env set dynamically eventually instead of hard coded.
app.set('env', 'development');

//Configure port
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

//Create HTTP server.
var server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalizes port to either a number or a named pipe
 * @param val the port value to be normalized
 * @returns {*}
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) return val;
    if (port >= 0) return port;

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 * @param error the error to be thrown
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    console.log('listening on: ' + bind);
    debug('Listening on ' + bind);
}
